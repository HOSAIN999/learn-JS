//git init
//git status 
//git add .
//git commit -m "message"
//بجای git add .ازgit commit -a -m "message"  استفاده میکنیم
//نکته دستور بالا برای فایل هایی کاربرد دارد که تغییر کرده اند و اگر فایلی را تازه 
//درست کرده باشیم کار نمکند و باید از همان git add . استفاده کنیم
//به وسیله کد git diff میتونیم تمام جزئیات رو مشاهده کنیم البته قبل از این که بفرستیم به stageبه وسیله git add.
//git diff برای لایه working tree هست
//البته به وسیله git diff--staged این برای لایه stageهست
//به وسیله git log ما میتوانیم لیست commit هایی که انجام شده است را ببینیم که چه تغییراتی به وسیله چه کسانی در چه زمانی انجام شده است
//اگر بخواهیم که زمانی که git log میگیریم مرتب تر به ما نشان داده شود از git log --oneline استفاده میکنیم
//git log --oneline میاد و commitها رو به صورت مختصر در یک خط نشان میدهد
//برای این که تمام commit ها رو نشان ندهد میتوانیم از git log -2استفاده کنیم که این عدد تعداد commit های آخر را می اورد
//به صورت ترکیبی هم میشود استفاده کردgit log --online -2
//به وسیله git log -2 -p می توانیم جزئیات تغییر دو تا commit آخر را ببینیم
//به وسیله دستور git log -2 --statما میتوانیم وضعیت آماری هر commit را ببینیم
//مفهومی به نام BRANCH که شما به وسیله آن تغییراتی رو انجام میدهید به عنوان نسخه سازی 
//مثلا شما یک تغییراتی را در اصل پروژه انجام داده اید اما اطمینان ندارید از باگ های احتمالی پس یک BRANCH میسازید و تغییرات را در آن اعمال میکنید
//و حالا شما دو نسخه از پروژه اصلی دارید و بعد از رفع باگ های احتمالی میاد و نسخه اصلی را به به نسخه که BANCH کردید MERGEمیکنید
//اگر شما در حال مثلا اضافه کردن DARK THEMEپروژه هستید و یک باگ به شما اعلام شد میتوانید با یک BRANCH ابتدا باگ را برطرف کنید و سپس دوباره 
//تغییرات DARK THEMEرا ادامه بدهید
//برای ساخت یک BRANCH از دستور (GIT BRANCH (اسم BRANCH DARKTHEME)) git branck darktheme
//برای مشاهده لیست branch ها از دستور git branch -aاستفاده میکنیم
//برای این که بین branch ها اصطلاحاswichکنیم از دستور git checkout darktheme استفاده میکنیم
//برای این که یک branch را حذف کنیم از git branch -d darktheme استفاده میکنیم 
//برای این که هم یک branch جدید بسازیم و هم به اون swichکنیم از دستور git checkout -b newbranch(نام جدید)
//نکته زمانی که شما داخل یک branch هستید نمیتوانید اطلاعات branch های دیگر را تغییر و یا حذف کنید مگر این که داخل 
//همان branch که هستید branch ساخته باشید
//برای این که ادغام کنیم دو تا branch رو به هم از merge استفاده میکنیم
//ابتد میرویم به branch مقصد مثال branch master مقصد هست و branch darktheme مبدا هست 
//git checkout master به مقصد میرویم و از کد git merge darktheme استفاده میکنیم البته اگر مشکلی نداشته باشد به صورت اتوماتیک merge میشود قبل از merge باید این را هم بزنیم :q
//حالا دوتا branch ها با هم merge شده اند
//اگر که مشکلی باشد باید به صورت دستی درست شوند
//برای زمان هایی که در دو branch تغییرات بروی یک فایل و یک خط انجام شده است به خطا میخوریم 
//مثلا در master یک خط را پاک کردیم ودر darktheme به همان خط چیزی اضافه کرده ایم و حالا میخواهیم که mergeکنیم 
//به مشکل میخوریم برای حل آن به ما قدرت انتخاب میدهد که تغییرات master را نگه داریم یا تغییرات darkthemeرا نگه داریم
//و یا هیچ کدام را و یا هردو را نگه داریم و بعد از انتخاب خط های اضافه را پاک کرده و یک اعلام وضعیت با git status
//بعد به حالت stageبا git add.
//و در آخر هم git commit -m "first merge with bog"
//(به جای دو خط بالا از git commit -a -m "first merge with bog")
//شما اگر که در branchها تغییراتی ایجاد کرده باشید ولی commitنکرده باشید با swichکردن بین branchهاتغییرات اعمال نمیشوند و شما تییرات را در دیگر branch ها میبینید
//اگر در branchتغییرات بدهید و آن را commitکنید سپس در یک branchدیگر روی همان فایل تغییرات بدهید و commitنکنید سپس بخواهید swich کنید بین branch دیگری 
//ودوباره روی همان فایل بروید اطلاعاتی که commit شده اند را میبینید و اطلاعاتی که commitنکرده اید حذف میشوند
//ما زمانی هست که در حال نوشتن یک سری کد ها هستیم ولی اول باید در یک branch دیگر تغییراتی بدهیم و این کدهایی که زدیم هم پاک نشود و همچنین 
//اگر commitکنیم به مشکل میخوریم در موقعیت یا باید این کدهایی که نوشتیم را پاک کنیم ویا از مفهومی به نام stash استفاده کنیم
//stashچیست ؟مابه وسیله stashاین تغییراتی که دادیم را ذخیره میکنیم و هم clean treeخود را پاک میکنیم
//git stash save "message"به وسیله این کد یک stashمیسازیم و یک پیغام ثبت میکنیم و در قسمتی به نام stash ذخیره میشود
//برای این که ببینیم چند تا stashداریم و یا همان لیست stash ها را ببینیم ازکد git stash list استفاده میکنیم 
//زمانی که لیست stash ها رو بزنیم به ما یک شناسه به همراه پیغامی که ثبت کردیم نشان داده میشودمثال
//git stash save "first stash save"
//git stash list
//stash@{0}:on master:first stash saveاین لیست stashسه قسمت دارد 
//قسمت اول شناسه stashهست قسمت دوم اسم branchکه داخل ان stash save شده است و قسمت سوم پیغام stashهست
//برای این که یک stash را حذف کنیم از git stash drop (اسم stash)استفاده میکنیم
//برای این که اطلاعات وجزئیات یک stash را ببینیم از git stash show -p(نشاسه stash)استفاده میکنیم
//برای این که اطلاعات داخل stash را بازیابی کنیم و بیاریم از کد git stash apply (شناسه stash)استفاده میکنیم
//اگر بخواهیم هم اطلاعات را بازیابی کنیم و هم یک stash را پاک کنیم از داخل لیست از کد git stash pop (شناسه stash)استفاده میکنیم
//ما تمامی فایل ها و پوشه هایی که می سازیم را باید به وسیله git باید commit کنیم اما 
//در یک سری موارد خاص مثل موارد امنیتی و...یک سری پوشه ها نباید اطلاعاتشون در اختیار دیگران قرار بگیرد به همین دلایل 
//ما از .gitignoreاستفاده میکنیم 
//حالا چگونه :ما میایم و اون فایل ها و پوشه ها را فقط اسم اون هارو داخل پوشه .gitignore قرار میدهیم
//برای کامنت گذاری داخل .gitignoreاز # استفاده میکنیم
//برای این که چندین فایل txtرا ignoreکنیم داخل .gitignoreاز *.txtاستفاده میکنیمو اگر بخواهیم
//یک فایل !a.txt
//برای این که ما اطلاعت رو بازیابی کنیم و یا به حالت قبل آخرین commitبرگردونیم باید از git restore (نام فایل ویا...)
//کد بالا برای زمانی هست که فایل ما در قسمت change باشد و هنوز stage نشده باشداگر که در قسمت stageباشد باید به working treeانتقال بدهیم 
//با کد git restore --staged (نام فایل و یا...)این کد باعث انتقال فایل به لایه changeمیشود و در ایجا کد بالا را میزنیم
//در کد های بالا بجای نام فایل اگر از (.)استفاده کنیم تمام فایل ها را انجام میدهد
//زمانی که ما از کد git log --oneline -10استفاده میکنیم برای ما 10 تا commitآخر را می آوردوبه ما یک شناسه که زرد رنگ هست میدهد
//اگر ما بخواهیم که پروژه را به یک commitخاص بفرستیم به وسیله این شناسه و این کد git reset --hard (شناسه)میتوانیم به تغییرات آن commit برویم
//اگر --hardباشد اطلاعات بعد از این commitپاک میشوداما اگر --hardنباشد اطلاعات بعد از اینcommit در حالت working treeقرار میگیرد و آماده تغییر
//برای این که اطلاعات را ارسال کنیم از git push استفاده میکنیم و این دستور آخرین تغییرات و commitها رو ارسال میکند
//برای این که آخرین تغییرات رو دریافت کنیم و پروژه ما هم تغییر کند ازgit pullاستفاده میکنیم
//برای این که یک repositoryجدید در git hub بسازیم ابتدا در صفحه اصلی روی گزینه new میزنیم 
//در صفحه جدید اسم repository را مینویسیم در قسمت repository name و بعد روی گزینه create repositoryمیزنیم
//در صفحه جدید به ما یک کد ssh,httpsمیدهد که یکی از آنها را کپی میکنیم (معمولاssh)
//سپس git bash را باز میکنیم و به وسیله کد git remote add origin (کدی که کپی کردیم از git hub)
//برای این که اطلاعات رو بفرستیم به git hub باید یک کدssh-keygen هم بسازیم
//در git bash میزنیم کد ssh-keygenو enterرا میزنیم به ما یک آدرس میدهد که داخل آن یک کد هست آن کد را در git hub کپی میکنیم 
//در قسمت تنظیمات بعد SSH & GPG Keys و بعد قسمت new ssh key در این قسمت یک عنوان میدهیم و بهد کد را در قسمت بعدی کپی میکنیم
//یعد برای ارسال اطلاعات در git bash کد git push -u origin (masterاسم branch) را میزنیم
//برای دریافت اطلاعات در سیستم خودمان از git hub برای بار اول از git clone (آدرس shhپروژه )
//مثال git clone (git@github.com:HOSAIN999/khodam.git) 
//برای دفعات بعد از کد git pull استفاده میکنیم و تغییرات رو دریافت میکنیم
//اگر در push اطلاعات دچار تناقض شدیم مثلا همکارم یک اطلاعاتی رو در یک صفحه ودر یک خط انجام داده است و من هم تغییراتی را در همان صفحه
//ودر همان خط ها انجام داده ام حالا وقتی میخواهم که اطلاعات رو push کنم به من  خطا میدهد ابتدا برای رفع این مشکل باید 
//یک بار اطلاعات رو pullکنم و بعد که اطلاعات را دریافت کردم باید تغییرات را مقایسه و بعد انتخاب کنم که کدام باشد و ....در
//آخر دوباره اطلاعات رو push کنم
//برای مشارکت در پروژه های متن باز در git hub ابتدا ما باید از پروژه مورد نظر یک fork بگیریم زمانی که روی دکمه fork 
//بزنیم روی اکانت ما در git hub یک fork از نمونه پروژه می آید 
//حالا ما پروژه را روی سیستمcloneمیکنیم بعد که cloneکردیم تغییرات را ایجاد کرده و به اکانت خودمان push میکنیم 
//بعد از push کردن برای این که تغییرات اطلاعات در اکانت پروژه اصلی هم اعمال شود باید یک pull request بزنیم 
//روی گزینه contribute میزنیم و open pull request را میزنیم بعد روی گزینه create pull request میزنیم و تغییرات برای مالک اصلی ارسال میشود و اگر پذیرفته شد تغییرات اعمال میشود


























